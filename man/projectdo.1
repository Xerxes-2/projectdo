'\" t
.\" Automatically generated by Pandoc 3.0.1
.\"
.\" Define V font for inline verbatim, using C font in formats
.\" that render this, and otherwise B font.
.ie "\f[CB]x\f[]"x" \{\
. ftr V B
. ftr VI BI
. ftr VB B
. ftr VBI BI
.\}
.el \{\
. ftr V CR
. ftr VI CI
. ftr VB CB
. ftr VBI CBI
.\}
.TH "projectdo" "1" "April 24, 2024" "projectdo 0.2.2" "User Manual"
.hy
.SH NAME
.PP
projectdo - build, run, test and more with ease
.SH SYNOPSIS
.PP
\f[B]projectdo\f[R] [\f[I]OPTION\f[R]] [\f[I]ACTIONS\f[R]]\&...
.SH DESCRIPTION
.PP
projectdo is a command-line program hat executes project actions (such
as build,
.PD 0
.P
.PD
run, test, etc.)
with the appropriate tool for current project in the working
.PD 0
.P
.PD
directory.
The appropriate tool and the current project root is intelligently
.PD 0
.P
.PD
detected based on the context where projectdo is executed.
For instance, projectdo
.PD 0
.P
.PD
test runs cargo test if a Cargo.toml is found and npm test if a
package.json file
.PD 0
.P
.PD
is found.
.SH OPTIONS
.TP
\f[B]-h, \f[VB]--\f[B]help\f[R]
display help message
.TP
\f[B]-n, -d, \f[VB]--\f[B]dry-run\f[R]
do not execute any commands with side-effects
.TP
\f[B]-q, \f[VB]--\f[B]quiet\f[R]
do not print commands as they are about to be executed
.TP
\f[B]-v, \f[VB]--\f[B]version\f[R]
prints installed projectdo version.
.SH ACTIONS
.TP
\f[B]build\f[R]
build project in working directory
.TP
\f[B]run\f[R]
run the project in working directory
.TP
\f[B]test\f[R]
test the project in working directory
.TP
\f[B]tool\f[R]
Invoke the guessed tool for the current project
.SH TOOL ARGUMENTS
.PP
Any arguments following [action] are passed along to the invoked tool.
.SH SHELL INTEGRATION
.SS FISH
.PP
projectdo ships with a plugin for the Fish shell.
The plugin includes
.PD 0
.P
.PD
auto-completion and functions for use with Fish\[cq]s abbreviation
feature.
.PP
The Fish plugin can be installed manually or with Fisher (fish plugin
manager):
.PD 0
.P
.PD
\f[V]fisher install paldepind/projectdo\f[R]
.PP
The plugin exposes four shell functions that should be configured with
.PD 0
.P
.PD
abbreviations as desired.
For instance:
.IP
.nf
\f[C]
abbr -a b --function projectdo_build
abbr -a r --function projectdo_run
abbr -a t --function projectdo_test
abbr -a p --function projectdo_tool
\f[R]
.fi
.PP
With the above \f[V]t\f[R] will expand to \f[V]cargo test\f[R],
\f[V]p\f[R] will expand to \f[V]cargo\f[R], etc.
.PD 0
.P
.PD
depending on the project.
.SS BASH + OTHERS
.PP
projectdo can be configured with shell aliases in any shell.
For instance:
.IP
.nf
\f[C]
alias t=\[aq]projectdo test\[aq]
alias r=\[aq]projectdo run\[aq]
alias b=\[aq]projectdo build\[aq]
alias p=\[aq]projectdo tool\[aq]
\f[R]
.fi
.SH SUPPORTED TOOLS AND LANGUAGES
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Tool
T}@T{
Language
T}@T{
Detected by
T}@T{
Commands
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Cargo
T}@T{
Rust
T}@T{
\f[V]Cargo.toml\f[R]
T}@T{
\f[V]cargo build\f[R], \f[V]cargo run\f[R], \f[V]cargo test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Poetry
T}@T{
Python
T}@T{
\f[V]pyproject.toml\f[R]
T}@T{
\f[V]poetry build\f[R], \f[V]poetry run pytest\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
CMake
T}@T{
C, C++ and Obj-C
T}@T{
\f[V]CMakeLists.txt\f[R]
T}@T{
\f[V]cmake --build . --target test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Meson
T}@T{
C, C++, etc.
T}@T{
\f[V]meson.build\f[R]
T}@T{
\f[V]meson compile\f[R], \f[V]meson test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
npm
T}@T{
JavaScript, etc.
T}@T{
\f[V]package.json\f[R]
T}@T{
\f[V]npm build\f[R], \f[V]npm start\f[R], \f[V]npm test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
yarn
T}@T{
JavaScript, etc.
T}@T{
\f[V]package.json\f[R], \f[V]yarn.lock\f[R]
T}@T{
\f[V]yarn build\f[R], \f[V]yarn start\f[R], \f[V]yarn test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Maven
T}@T{
Java, etc.
T}@T{
\f[V]pom.xml\f[R]
T}@T{
\f[V]mvn compile\f[R], \f[V]mvn test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Leiningen
T}@T{
Clojure
T}@T{
\f[V]project.clj\f[R]
T}@T{
\f[V]lein test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Cabal
T}@T{
Haskell
T}@T{
\f[V]*.cabal\f[R]
T}@T{
\f[V]cabal build\f[R], \f[V]cabal run\f[R], \f[V]cabal test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Stack
T}@T{
Haskell
T}@T{
\f[V]stack.yaml\f[R]
T}@T{
\f[V]stack build\f[R], \f[V]stack run\f[R], \f[V]stack test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
make
T}@T{
Any
T}@T{
\f[V]Makefile\f[R]
T}@T{
\f[V]make\f[R], \f[V]make test/check\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Mage
T}@T{
Go
T}@T{
\f[V]magefile.go + test/check target\f[R]
T}@T{
\f[V]mage test/check\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Go
T}@T{
Go
T}@T{
\f[V]go.mod\f[R]
T}@T{
\f[V]go test\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Tectonic
T}@T{
LaTeX
T}@T{
\f[V]Tectonic.toml\f[R]
T}@T{
\f[V]tectonic -X build\f[R]
T}
_
.TE
.PP
.TS
tab(@);
lw(8.7n) lw(11.2n) lw(24.2n) lw(26.0n).
T{
Shell script
T}@T{
Any
T}@T{
\f[V]build.sh\f[R]
T}@T{
\f[V]sh -c build.sh\f[R]
T}
_
.TE
.SH AUTHOR
.PP
Written by \f[V]K_Lar\f[R].
.SH REPORTING BUGS
.PP
Report any bugs you might find here:
<https://github.com/paldepind/projectdo/issues>
